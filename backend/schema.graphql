type Booking {
  _id: ID!
  event: Event!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type Event {
  _id: ID!
  title: String!
  description: String!
  price: Float!
  date: String!
  creator: User!
}

type User {
  _id: ID!
  email: String!
  password: String
  createdEvents: [Event!]
}

type SuccessMessage {
  message: String
}

type AuthData {
  userId: ID!
  token: String!
  tokenExpiration: Int!
}

input EventInput {
  title: String!
  description: String!
  price: Float!
  date: String!
}

input UserInput {
  email: String!
  password: String!
}

type Query {
  me: User
	events: [Event!]!
  bookings: [Booking!]!
}

type Mutation {
  login(email: String!, password: String!): AuthData!
  logout: SuccessMessage!
  createUser(userInput: UserInput): User
  createEvent(eventInput: EventInput): Event
  deleteEvent(eventId: ID!): SuccessMessage!
  bookEvent(eventId: ID!): Booking!
  cancelBooking(bookingId: ID!): Event!
}

type Subscription {
  subscriptionEventAdded: Event!
  subscriptionEventDeleted: Event!
  subscriptionBookingAdded: Booking!
  subscriptionBookingsDeleted: [Booking]
}